{"ast":null,"code":"/*\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n(function (chars) {\n  \"use strict\";\n\n  exports.encode = function (arraybuffer) {\n    var bytes = new Uint8Array(arraybuffer),\n        i,\n        len = bytes.length,\n        base64 = \"\";\n\n    for (i = 0; i < len; i += 3) {\n      base64 += chars[bytes[i] >> 2];\n      base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n      base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n      base64 += chars[bytes[i + 2] & 63];\n    }\n\n    if (len % 3 === 2) {\n      base64 = base64.substring(0, base64.length - 1) + \"=\";\n    } else if (len % 3 === 1) {\n      base64 = base64.substring(0, base64.length - 2) + \"==\";\n    }\n\n    return base64;\n  };\n\n  exports.decode = function (base64) {\n    var bufferLength = base64.length * 0.75,\n        len = base64.length,\n        i,\n        p = 0,\n        encoded1,\n        encoded2,\n        encoded3,\n        encoded4;\n\n    if (base64[base64.length - 1] === \"=\") {\n      bufferLength--;\n\n      if (base64[base64.length - 2] === \"=\") {\n        bufferLength--;\n      }\n    }\n\n    var arraybuffer = new ArrayBuffer(bufferLength),\n        bytes = new Uint8Array(arraybuffer);\n\n    for (i = 0; i < len; i += 4) {\n      encoded1 = chars.indexOf(base64[i]);\n      encoded2 = chars.indexOf(base64[i + 1]);\n      encoded3 = chars.indexOf(base64[i + 2]);\n      encoded4 = chars.indexOf(base64[i + 3]);\n      bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n      bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n      bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n    }\n\n    return arraybuffer;\n  };\n})(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\");","map":{"version":3,"sources":["D:/Backend new/project_video_chat-master/client/node_modules/base64-arraybuffer/lib/base64-arraybuffer.js"],"names":["chars","exports","encode","arraybuffer","bytes","Uint8Array","i","len","length","base64","substring","decode","bufferLength","p","encoded1","encoded2","encoded3","encoded4","ArrayBuffer","indexOf"],"mappings":"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","sourcesContent":["/*\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n(function(chars){\n  \"use strict\";\n\n  exports.encode = function(arraybuffer) {\n    var bytes = new Uint8Array(arraybuffer),\n    i, len = bytes.length, base64 = \"\";\n\n    for (i = 0; i < len; i+=3) {\n      base64 += chars[bytes[i] >> 2];\n      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n      base64 += chars[bytes[i + 2] & 63];\n    }\n\n    if ((len % 3) === 2) {\n      base64 = base64.substring(0, base64.length - 1) + \"=\";\n    } else if (len % 3 === 1) {\n      base64 = base64.substring(0, base64.length - 2) + \"==\";\n    }\n\n    return base64;\n  };\n\n  exports.decode =  function(base64) {\n    var bufferLength = base64.length * 0.75,\n    len = base64.length, i, p = 0,\n    encoded1, encoded2, encoded3, encoded4;\n\n    if (base64[base64.length - 1] === \"=\") {\n      bufferLength--;\n      if (base64[base64.length - 2] === \"=\") {\n        bufferLength--;\n      }\n    }\n\n    var arraybuffer = new ArrayBuffer(bufferLength),\n    bytes = new Uint8Array(arraybuffer);\n\n    for (i = 0; i < len; i+=4) {\n      encoded1 = chars.indexOf(base64[i]);\n      encoded2 = chars.indexOf(base64[i+1]);\n      encoded3 = chars.indexOf(base64[i+2]);\n      encoded4 = chars.indexOf(base64[i+3]);\n\n      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n\n    return arraybuffer;\n  };\n})(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\");\n"]},"metadata":{},"sourceType":"script"}