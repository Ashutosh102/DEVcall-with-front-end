{"ast":null,"code":"const parser = require(\"engine.io-parser\");\n\nconst Emitter = require(\"component-emitter\");\n\nclass Transport extends Emitter {\n  /**\n   * Transport abstract constructor.\n   *\n   * @param {Object} options.\n   * @api private\n   */\n  constructor(opts) {\n    super();\n    this.opts = opts;\n    this.query = opts.query;\n    this.readyState = \"\";\n    this.socket = opts.socket;\n  }\n  /**\n   * Emits an error.\n   *\n   * @param {String} str\n   * @return {Transport} for chaining\n   * @api public\n   */\n\n\n  onError(msg, desc) {\n    const err = new Error(msg);\n    err.type = \"TransportError\";\n    err.description = desc;\n    this.emit(\"error\", err);\n    return this;\n  }\n  /**\n   * Opens the transport.\n   *\n   * @api public\n   */\n\n\n  open() {\n    if (\"closed\" === this.readyState || \"\" === this.readyState) {\n      this.readyState = \"opening\";\n      this.doOpen();\n    }\n\n    return this;\n  }\n  /**\n   * Closes the transport.\n   *\n   * @api private\n   */\n\n\n  close() {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n      this.doClose();\n      this.onClose();\n    }\n\n    return this;\n  }\n  /**\n   * Sends multiple packets.\n   *\n   * @param {Array} packets\n   * @api private\n   */\n\n\n  send(packets) {\n    if (\"open\" === this.readyState) {\n      this.write(packets);\n    } else {\n      throw new Error(\"Transport not open\");\n    }\n  }\n  /**\n   * Called upon open\n   *\n   * @api private\n   */\n\n\n  onOpen() {\n    this.readyState = \"open\";\n    this.writable = true;\n    this.emit(\"open\");\n  }\n  /**\n   * Called with data.\n   *\n   * @param {String} data\n   * @api private\n   */\n\n\n  onData(data) {\n    const packet = parser.decodePacket(data, this.socket.binaryType);\n    this.onPacket(packet);\n  }\n  /**\n   * Called with a decoded packet.\n   */\n\n\n  onPacket(packet) {\n    this.emit(\"packet\", packet);\n  }\n  /**\n   * Called upon close.\n   *\n   * @api private\n   */\n\n\n  onClose() {\n    this.readyState = \"closed\";\n    this.emit(\"close\");\n  }\n\n}\n\nmodule.exports = Transport;","map":{"version":3,"sources":["D:/Backend new/project_video_chat-master/client/node_modules/engine.io-client/lib/transport.js"],"names":["parser","require","Emitter","Transport","constructor","opts","query","readyState","socket","onError","msg","desc","err","Error","type","description","emit","open","doOpen","close","doClose","onClose","send","packets","write","onOpen","writable","onData","data","packet","decodePacket","binaryType","onPacket","module","exports"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAAtB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,mBAAD,CAAvB;;AAEA,MAAME,SAAN,SAAwBD,OAAxB,CAAgC;AAC9B;AACF;AACA;AACA;AACA;AACA;AACEE,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB;AAEA,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAaD,IAAI,CAACC,KAAlB;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,MAAL,GAAcH,IAAI,CAACG,MAAnB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,OAAO,CAACC,GAAD,EAAMC,IAAN,EAAY;AACjB,UAAMC,GAAG,GAAG,IAAIC,KAAJ,CAAUH,GAAV,CAAZ;AACAE,IAAAA,GAAG,CAACE,IAAJ,GAAW,gBAAX;AACAF,IAAAA,GAAG,CAACG,WAAJ,GAAkBJ,IAAlB;AACA,SAAKK,IAAL,CAAU,OAAV,EAAmBJ,GAAnB;AACA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEK,EAAAA,IAAI,GAAG;AACL,QAAI,aAAa,KAAKV,UAAlB,IAAgC,OAAO,KAAKA,UAAhD,EAA4D;AAC1D,WAAKA,UAAL,GAAkB,SAAlB;AACA,WAAKW,MAAL;AACD;;AAED,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,KAAK,GAAG;AACN,QAAI,cAAc,KAAKZ,UAAnB,IAAiC,WAAW,KAAKA,UAArD,EAAiE;AAC/D,WAAKa,OAAL;AACA,WAAKC,OAAL;AACD;;AAED,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,IAAI,CAACC,OAAD,EAAU;AACZ,QAAI,WAAW,KAAKhB,UAApB,EAAgC;AAC9B,WAAKiB,KAAL,CAAWD,OAAX;AACD,KAFD,MAEO;AACL,YAAM,IAAIV,KAAJ,CAAU,oBAAV,CAAN;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;AACEY,EAAAA,MAAM,GAAG;AACP,SAAKlB,UAAL,GAAkB,MAAlB;AACA,SAAKmB,QAAL,GAAgB,IAAhB;AACA,SAAKV,IAAL,CAAU,MAAV;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEW,EAAAA,MAAM,CAACC,IAAD,EAAO;AACX,UAAMC,MAAM,GAAG7B,MAAM,CAAC8B,YAAP,CAAoBF,IAApB,EAA0B,KAAKpB,MAAL,CAAYuB,UAAtC,CAAf;AACA,SAAKC,QAAL,CAAcH,MAAd;AACD;AAED;AACF;AACA;;;AACEG,EAAAA,QAAQ,CAACH,MAAD,EAAS;AACf,SAAKb,IAAL,CAAU,QAAV,EAAoBa,MAApB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACER,EAAAA,OAAO,GAAG;AACR,SAAKd,UAAL,GAAkB,QAAlB;AACA,SAAKS,IAAL,CAAU,OAAV;AACD;;AA9G6B;;AAiHhCiB,MAAM,CAACC,OAAP,GAAiB/B,SAAjB","sourcesContent":["const parser = require(\"engine.io-parser\");\nconst Emitter = require(\"component-emitter\");\n\nclass Transport extends Emitter {\n  /**\n   * Transport abstract constructor.\n   *\n   * @param {Object} options.\n   * @api private\n   */\n  constructor(opts) {\n    super();\n\n    this.opts = opts;\n    this.query = opts.query;\n    this.readyState = \"\";\n    this.socket = opts.socket;\n  }\n\n  /**\n   * Emits an error.\n   *\n   * @param {String} str\n   * @return {Transport} for chaining\n   * @api public\n   */\n  onError(msg, desc) {\n    const err = new Error(msg);\n    err.type = \"TransportError\";\n    err.description = desc;\n    this.emit(\"error\", err);\n    return this;\n  }\n\n  /**\n   * Opens the transport.\n   *\n   * @api public\n   */\n  open() {\n    if (\"closed\" === this.readyState || \"\" === this.readyState) {\n      this.readyState = \"opening\";\n      this.doOpen();\n    }\n\n    return this;\n  }\n\n  /**\n   * Closes the transport.\n   *\n   * @api private\n   */\n  close() {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n      this.doClose();\n      this.onClose();\n    }\n\n    return this;\n  }\n\n  /**\n   * Sends multiple packets.\n   *\n   * @param {Array} packets\n   * @api private\n   */\n  send(packets) {\n    if (\"open\" === this.readyState) {\n      this.write(packets);\n    } else {\n      throw new Error(\"Transport not open\");\n    }\n  }\n\n  /**\n   * Called upon open\n   *\n   * @api private\n   */\n  onOpen() {\n    this.readyState = \"open\";\n    this.writable = true;\n    this.emit(\"open\");\n  }\n\n  /**\n   * Called with data.\n   *\n   * @param {String} data\n   * @api private\n   */\n  onData(data) {\n    const packet = parser.decodePacket(data, this.socket.binaryType);\n    this.onPacket(packet);\n  }\n\n  /**\n   * Called with a decoded packet.\n   */\n  onPacket(packet) {\n    this.emit(\"packet\", packet);\n  }\n\n  /**\n   * Called upon close.\n   *\n   * @api private\n   */\n  onClose() {\n    this.readyState = \"closed\";\n    this.emit(\"close\");\n  }\n}\n\nmodule.exports = Transport;\n"]},"metadata":{},"sourceType":"script"}