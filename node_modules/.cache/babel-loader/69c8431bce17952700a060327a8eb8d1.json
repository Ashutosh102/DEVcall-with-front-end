{"ast":null,"code":"/*! simple-peer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nconst debug = require('debug')('simple-peer');\n\nconst getBrowserRTC = require('get-browser-rtc');\n\nconst randombytes = require('randombytes');\n\nconst stream = require('readable-stream');\n\nconst queueMicrotask = require('queue-microtask'); // TODO: remove when Node 10 is not supported\n\n\nconst errCode = require('err-code');\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst MAX_BUFFERED_AMOUNT = 64 * 1024;\nconst ICECOMPLETE_TIMEOUT = 5 * 1000;\nconst CHANNEL_CLOSING_TIMEOUT = 5 * 1000; // HACK: Filter trickle lines when trickle is disabled #354\n\nfunction filterTrickle(sdp) {\n  return sdp.replace(/a=ice-options:trickle\\s\\n/g, '');\n}\n\nfunction warn(message) {\n  console.warn(message);\n}\n/**\n * WebRTC peer connection. Same API as node core `net.Socket`, plus a few extra methods.\n * Duplex stream.\n * @param {Object} opts\n */\n\n\nclass Peer extends stream.Duplex {\n  constructor(opts) {\n    opts = Object.assign({\n      allowHalfOpen: false\n    }, opts);\n    super(opts);\n    this._id = randombytes(4).toString('hex').slice(0, 7);\n\n    this._debug('new peer %o', opts);\n\n    this.channelName = opts.initiator ? opts.channelName || randombytes(20).toString('hex') : null;\n    this.initiator = opts.initiator || false;\n    this.channelConfig = opts.channelConfig || Peer.channelConfig;\n    this.channelNegotiated = this.channelConfig.negotiated;\n    this.config = Object.assign({}, Peer.config, opts.config);\n    this.offerOptions = opts.offerOptions || {};\n    this.answerOptions = opts.answerOptions || {};\n\n    this.sdpTransform = opts.sdpTransform || (sdp => sdp);\n\n    this.streams = opts.streams || (opts.stream ? [opts.stream] : []); // support old \"stream\" option\n\n    this.trickle = opts.trickle !== undefined ? opts.trickle : true;\n    this.allowHalfTrickle = opts.allowHalfTrickle !== undefined ? opts.allowHalfTrickle : false;\n    this.iceCompleteTimeout = opts.iceCompleteTimeout || ICECOMPLETE_TIMEOUT;\n    this.destroyed = false;\n    this.destroying = false;\n    this._connected = false;\n    this.remoteAddress = undefined;\n    this.remoteFamily = undefined;\n    this.remotePort = undefined;\n    this.localAddress = undefined;\n    this.localFamily = undefined;\n    this.localPort = undefined;\n    this._wrtc = opts.wrtc && typeof opts.wrtc === 'object' ? opts.wrtc : getBrowserRTC();\n\n    if (!this._wrtc) {\n      if (typeof window === 'undefined') {\n        throw errCode(new Error('No WebRTC support: Specify `opts.wrtc` option in this environment'), 'ERR_WEBRTC_SUPPORT');\n      } else {\n        throw errCode(new Error('No WebRTC support: Not a supported browser'), 'ERR_WEBRTC_SUPPORT');\n      }\n    }\n\n    this._pcReady = false;\n    this._channelReady = false;\n    this._iceComplete = false; // ice candidate trickle done (got null candidate)\n\n    this._iceCompleteTimer = null; // send an offer/answer anyway after some timeout\n\n    this._channel = null;\n    this._pendingCandidates = [];\n    this._isNegotiating = false; // is this peer waiting for negotiation to complete?\n\n    this._firstNegotiation = true;\n    this._batchedNegotiation = false; // batch synchronous negotiations\n\n    this._queuedNegotiation = false; // is there a queued negotiation request?\n\n    this._sendersAwaitingStable = [];\n    this._senderMap = new Map();\n    this._closingInterval = null;\n    this._remoteTracks = [];\n    this._remoteStreams = [];\n    this._chunk = null;\n    this._cb = null;\n    this._interval = null;\n\n    try {\n      this._pc = new this._wrtc.RTCPeerConnection(this.config);\n    } catch (err) {\n      this.destroy(errCode(err, 'ERR_PC_CONSTRUCTOR'));\n      return;\n    } // We prefer feature detection whenever possible, but sometimes that's not\n    // possible for certain implementations.\n\n\n    this._isReactNativeWebrtc = typeof this._pc._peerConnectionId === 'number';\n\n    this._pc.oniceconnectionstatechange = () => {\n      this._onIceStateChange();\n    };\n\n    this._pc.onicegatheringstatechange = () => {\n      this._onIceStateChange();\n    };\n\n    this._pc.onconnectionstatechange = () => {\n      this._onConnectionStateChange();\n    };\n\n    this._pc.onsignalingstatechange = () => {\n      this._onSignalingStateChange();\n    };\n\n    this._pc.onicecandidate = event => {\n      this._onIceCandidate(event);\n    }; // HACK: Fix for odd Firefox behavior, see: https://github.com/feross/simple-peer/pull/783\n\n\n    if (typeof this._pc.peerIdentity === 'object') {\n      this._pc.peerIdentity.catch(err => {\n        this.destroy(errCode(err, 'ERR_PC_PEER_IDENTITY'));\n      });\n    } // Other spec events, unused by this implementation:\n    // - onconnectionstatechange\n    // - onicecandidateerror\n    // - onfingerprintfailure\n    // - onnegotiationneeded\n\n\n    if (this.initiator || this.channelNegotiated) {\n      this._setupData({\n        channel: this._pc.createDataChannel(this.channelName, this.channelConfig)\n      });\n    } else {\n      this._pc.ondatachannel = event => {\n        this._setupData(event);\n      };\n    }\n\n    if (this.streams) {\n      this.streams.forEach(stream => {\n        this.addStream(stream);\n      });\n    }\n\n    this._pc.ontrack = event => {\n      this._onTrack(event);\n    };\n\n    this._debug('initial negotiation');\n\n    this._needsNegotiation();\n\n    this._onFinishBound = () => {\n      this._onFinish();\n    };\n\n    this.once('finish', this._onFinishBound);\n  }\n\n  get bufferSize() {\n    return this._channel && this._channel.bufferedAmount || 0;\n  } // HACK: it's possible channel.readyState is \"closing\" before peer.destroy() fires\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=882743\n\n\n  get connected() {\n    return this._connected && this._channel.readyState === 'open';\n  }\n\n  address() {\n    return {\n      port: this.localPort,\n      family: this.localFamily,\n      address: this.localAddress\n    };\n  }\n\n  signal(data) {\n    if (this.destroying) return;\n    if (this.destroyed) throw errCode(new Error('cannot signal after peer is destroyed'), 'ERR_DESTROYED');\n\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data);\n      } catch (err) {\n        data = {};\n      }\n    }\n\n    this._debug('signal()');\n\n    if (data.renegotiate && this.initiator) {\n      this._debug('got request to renegotiate');\n\n      this._needsNegotiation();\n    }\n\n    if (data.transceiverRequest && this.initiator) {\n      this._debug('got request for transceiver');\n\n      this.addTransceiver(data.transceiverRequest.kind, data.transceiverRequest.init);\n    }\n\n    if (data.candidate) {\n      if (this._pc.remoteDescription && this._pc.remoteDescription.type) {\n        this._addIceCandidate(data.candidate);\n      } else {\n        this._pendingCandidates.push(data.candidate);\n      }\n    }\n\n    if (data.sdp) {\n      this._pc.setRemoteDescription(new this._wrtc.RTCSessionDescription(data)).then(() => {\n        if (this.destroyed) return;\n\n        this._pendingCandidates.forEach(candidate => {\n          this._addIceCandidate(candidate);\n        });\n\n        this._pendingCandidates = [];\n        if (this._pc.remoteDescription.type === 'offer') this._createAnswer();\n      }).catch(err => {\n        this.destroy(errCode(err, 'ERR_SET_REMOTE_DESCRIPTION'));\n      });\n    }\n\n    if (!data.sdp && !data.candidate && !data.renegotiate && !data.transceiverRequest) {\n      this.destroy(errCode(new Error('signal() called with invalid signal data'), 'ERR_SIGNALING'));\n    }\n  }\n\n  _addIceCandidate(candidate) {\n    const iceCandidateObj = new this._wrtc.RTCIceCandidate(candidate);\n\n    this._pc.addIceCandidate(iceCandidateObj).catch(err => {\n      if (!iceCandidateObj.address || iceCandidateObj.address.endsWith('.local')) {\n        warn('Ignoring unsupported ICE candidate.');\n      } else {\n        this.destroy(errCode(err, 'ERR_ADD_ICE_CANDIDATE'));\n      }\n    });\n  }\n  /**\n   * Send text/binary data to the remote peer.\n   * @param {ArrayBufferView|ArrayBuffer|Buffer|string|Blob} chunk\n   */\n\n\n  send(chunk) {\n    if (this.destroying) return;\n    if (this.destroyed) throw errCode(new Error('cannot send after peer is destroyed'), 'ERR_DESTROYED');\n\n    this._channel.send(chunk);\n  }\n  /**\n   * Add a Transceiver to the connection.\n   * @param {String} kind\n   * @param {Object} init\n   */\n\n\n  addTransceiver(kind, init) {\n    if (this.destroying) return;\n    if (this.destroyed) throw errCode(new Error('cannot addTransceiver after peer is destroyed'), 'ERR_DESTROYED');\n\n    this._debug('addTransceiver()');\n\n    if (this.initiator) {\n      try {\n        this._pc.addTransceiver(kind, init);\n\n        this._needsNegotiation();\n      } catch (err) {\n        this.destroy(errCode(err, 'ERR_ADD_TRANSCEIVER'));\n      }\n    } else {\n      this.emit('signal', {\n        // request initiator to renegotiate\n        type: 'transceiverRequest',\n        transceiverRequest: {\n          kind,\n          init\n        }\n      });\n    }\n  }\n  /**\n   * Add a MediaStream to the connection.\n   * @param {MediaStream} stream\n   */\n\n\n  addStream(stream) {\n    if (this.destroying) return;\n    if (this.destroyed) throw errCode(new Error('cannot addStream after peer is destroyed'), 'ERR_DESTROYED');\n\n    this._debug('addStream()');\n\n    stream.getTracks().forEach(track => {\n      this.addTrack(track, stream);\n    });\n  }\n  /**\n   * Add a MediaStreamTrack to the connection.\n   * @param {MediaStreamTrack} track\n   * @param {MediaStream} stream\n   */\n\n\n  addTrack(track, stream) {\n    if (this.destroying) return;\n    if (this.destroyed) throw errCode(new Error('cannot addTrack after peer is destroyed'), 'ERR_DESTROYED');\n\n    this._debug('addTrack()');\n\n    const submap = this._senderMap.get(track) || new Map(); // nested Maps map [track, stream] to sender\n\n    let sender = submap.get(stream);\n\n    if (!sender) {\n      sender = this._pc.addTrack(track, stream);\n      submap.set(stream, sender);\n\n      this._senderMap.set(track, submap);\n\n      this._needsNegotiation();\n    } else if (sender.removed) {\n      throw errCode(new Error('Track has been removed. You should enable/disable tracks that you want to re-add.'), 'ERR_SENDER_REMOVED');\n    } else {\n      throw errCode(new Error('Track has already been added to that stream.'), 'ERR_SENDER_ALREADY_ADDED');\n    }\n  }\n  /**\n   * Replace a MediaStreamTrack by another in the connection.\n   * @param {MediaStreamTrack} oldTrack\n   * @param {MediaStreamTrack} newTrack\n   * @param {MediaStream} stream\n   */\n\n\n  replaceTrack(oldTrack, newTrack, stream) {\n    if (this.destroying) return;\n    if (this.destroyed) throw errCode(new Error('cannot replaceTrack after peer is destroyed'), 'ERR_DESTROYED');\n\n    this._debug('replaceTrack()');\n\n    const submap = this._senderMap.get(oldTrack);\n\n    const sender = submap ? submap.get(stream) : null;\n\n    if (!sender) {\n      throw errCode(new Error('Cannot replace track that was never added.'), 'ERR_TRACK_NOT_ADDED');\n    }\n\n    if (newTrack) this._senderMap.set(newTrack, submap);\n\n    if (sender.replaceTrack != null) {\n      sender.replaceTrack(newTrack);\n    } else {\n      this.destroy(errCode(new Error('replaceTrack is not supported in this browser'), 'ERR_UNSUPPORTED_REPLACETRACK'));\n    }\n  }\n  /**\n   * Remove a MediaStreamTrack from the connection.\n   * @param {MediaStreamTrack} track\n   * @param {MediaStream} stream\n   */\n\n\n  removeTrack(track, stream) {\n    if (this.destroying) return;\n    if (this.destroyed) throw errCode(new Error('cannot removeTrack after peer is destroyed'), 'ERR_DESTROYED');\n\n    this._debug('removeSender()');\n\n    const submap = this._senderMap.get(track);\n\n    const sender = submap ? submap.get(stream) : null;\n\n    if (!sender) {\n      throw errCode(new Error('Cannot remove track that was never added.'), 'ERR_TRACK_NOT_ADDED');\n    }\n\n    try {\n      sender.removed = true;\n\n      this._pc.removeTrack(sender);\n    } catch (err) {\n      if (err.name === 'NS_ERROR_UNEXPECTED') {\n        this._sendersAwaitingStable.push(sender); // HACK: Firefox must wait until (signalingState === stable) https://bugzilla.mozilla.org/show_bug.cgi?id=1133874\n\n      } else {\n        this.destroy(errCode(err, 'ERR_REMOVE_TRACK'));\n      }\n    }\n\n    this._needsNegotiation();\n  }\n  /**\n   * Remove a MediaStream from the connection.\n   * @param {MediaStream} stream\n   */\n\n\n  removeStream(stream) {\n    if (this.destroying) return;\n    if (this.destroyed) throw errCode(new Error('cannot removeStream after peer is destroyed'), 'ERR_DESTROYED');\n\n    this._debug('removeSenders()');\n\n    stream.getTracks().forEach(track => {\n      this.removeTrack(track, stream);\n    });\n  }\n\n  _needsNegotiation() {\n    this._debug('_needsNegotiation');\n\n    if (this._batchedNegotiation) return; // batch synchronous renegotiations\n\n    this._batchedNegotiation = true;\n    queueMicrotask(() => {\n      this._batchedNegotiation = false;\n\n      if (this.initiator || !this._firstNegotiation) {\n        this._debug('starting batched negotiation');\n\n        this.negotiate();\n      } else {\n        this._debug('non-initiator initial negotiation request discarded');\n      }\n\n      this._firstNegotiation = false;\n    });\n  }\n\n  negotiate() {\n    if (this.destroying) return;\n    if (this.destroyed) throw errCode(new Error('cannot negotiate after peer is destroyed'), 'ERR_DESTROYED');\n\n    if (this.initiator) {\n      if (this._isNegotiating) {\n        this._queuedNegotiation = true;\n\n        this._debug('already negotiating, queueing');\n      } else {\n        this._debug('start negotiation');\n\n        setTimeout(() => {\n          // HACK: Chrome crashes if we immediately call createOffer\n          this._createOffer();\n        }, 0);\n      }\n    } else {\n      if (this._isNegotiating) {\n        this._queuedNegotiation = true;\n\n        this._debug('already negotiating, queueing');\n      } else {\n        this._debug('requesting negotiation from initiator');\n\n        this.emit('signal', {\n          // request initiator to renegotiate\n          type: 'renegotiate',\n          renegotiate: true\n        });\n      }\n    }\n\n    this._isNegotiating = true;\n  } // TODO: Delete this method once readable-stream is updated to contain a default\n  // implementation of destroy() that automatically calls _destroy()\n  // See: https://github.com/nodejs/readable-stream/issues/283\n\n\n  destroy(err) {\n    this._destroy(err, () => {});\n  }\n\n  _destroy(err, cb) {\n    if (this.destroyed || this.destroying) return;\n    this.destroying = true;\n\n    this._debug('destroying (error: %s)', err && (err.message || err));\n\n    queueMicrotask(() => {\n      // allow events concurrent with the call to _destroy() to fire (see #692)\n      this.destroyed = true;\n      this.destroying = false;\n\n      this._debug('destroy (error: %s)', err && (err.message || err));\n\n      this.readable = this.writable = false;\n      if (!this._readableState.ended) this.push(null);\n      if (!this._writableState.finished) this.end();\n      this._connected = false;\n      this._pcReady = false;\n      this._channelReady = false;\n      this._remoteTracks = null;\n      this._remoteStreams = null;\n      this._senderMap = null;\n      clearInterval(this._closingInterval);\n      this._closingInterval = null;\n      clearInterval(this._interval);\n      this._interval = null;\n      this._chunk = null;\n      this._cb = null;\n      if (this._onFinishBound) this.removeListener('finish', this._onFinishBound);\n      this._onFinishBound = null;\n\n      if (this._channel) {\n        try {\n          this._channel.close();\n        } catch (err) {} // allow events concurrent with destruction to be handled\n\n\n        this._channel.onmessage = null;\n        this._channel.onopen = null;\n        this._channel.onclose = null;\n        this._channel.onerror = null;\n      }\n\n      if (this._pc) {\n        try {\n          this._pc.close();\n        } catch (err) {} // allow events concurrent with destruction to be handled\n\n\n        this._pc.oniceconnectionstatechange = null;\n        this._pc.onicegatheringstatechange = null;\n        this._pc.onsignalingstatechange = null;\n        this._pc.onicecandidate = null;\n        this._pc.ontrack = null;\n        this._pc.ondatachannel = null;\n      }\n\n      this._pc = null;\n      this._channel = null;\n      if (err) this.emit('error', err);\n      this.emit('close');\n      cb();\n    });\n  }\n\n  _setupData(event) {\n    if (!event.channel) {\n      // In some situations `pc.createDataChannel()` returns `undefined` (in wrtc),\n      // which is invalid behavior. Handle it gracefully.\n      // See: https://github.com/feross/simple-peer/issues/163\n      return this.destroy(errCode(new Error('Data channel event is missing `channel` property'), 'ERR_DATA_CHANNEL'));\n    }\n\n    this._channel = event.channel;\n    this._channel.binaryType = 'arraybuffer';\n\n    if (typeof this._channel.bufferedAmountLowThreshold === 'number') {\n      this._channel.bufferedAmountLowThreshold = MAX_BUFFERED_AMOUNT;\n    }\n\n    this.channelName = this._channel.label;\n\n    this._channel.onmessage = event => {\n      this._onChannelMessage(event);\n    };\n\n    this._channel.onbufferedamountlow = () => {\n      this._onChannelBufferedAmountLow();\n    };\n\n    this._channel.onopen = () => {\n      this._onChannelOpen();\n    };\n\n    this._channel.onclose = () => {\n      this._onChannelClose();\n    };\n\n    this._channel.onerror = err => {\n      this.destroy(errCode(err, 'ERR_DATA_CHANNEL'));\n    }; // HACK: Chrome will sometimes get stuck in readyState \"closing\", let's check for this condition\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=882743\n\n\n    let isClosing = false;\n    this._closingInterval = setInterval(() => {\n      // No \"onclosing\" event\n      if (this._channel && this._channel.readyState === 'closing') {\n        if (isClosing) this._onChannelClose(); // closing timed out: equivalent to onclose firing\n\n        isClosing = true;\n      } else {\n        isClosing = false;\n      }\n    }, CHANNEL_CLOSING_TIMEOUT);\n  }\n\n  _read() {}\n\n  _write(chunk, encoding, cb) {\n    if (this.destroyed) return cb(errCode(new Error('cannot write after peer is destroyed'), 'ERR_DATA_CHANNEL'));\n\n    if (this._connected) {\n      try {\n        this.send(chunk);\n      } catch (err) {\n        return this.destroy(errCode(err, 'ERR_DATA_CHANNEL'));\n      }\n\n      if (this._channel.bufferedAmount > MAX_BUFFERED_AMOUNT) {\n        this._debug('start backpressure: bufferedAmount %d', this._channel.bufferedAmount);\n\n        this._cb = cb;\n      } else {\n        cb(null);\n      }\n    } else {\n      this._debug('write before connect');\n\n      this._chunk = chunk;\n      this._cb = cb;\n    }\n  } // When stream finishes writing, close socket. Half open connections are not\n  // supported.\n\n\n  _onFinish() {\n    if (this.destroyed) return; // Wait a bit before destroying so the socket flushes.\n    // TODO: is there a more reliable way to accomplish this?\n\n    const destroySoon = () => {\n      setTimeout(() => this.destroy(), 1000);\n    };\n\n    if (this._connected) {\n      destroySoon();\n    } else {\n      this.once('connect', destroySoon);\n    }\n  }\n\n  _startIceCompleteTimeout() {\n    if (this.destroyed) return;\n    if (this._iceCompleteTimer) return;\n\n    this._debug('started iceComplete timeout');\n\n    this._iceCompleteTimer = setTimeout(() => {\n      if (!this._iceComplete) {\n        this._iceComplete = true;\n\n        this._debug('iceComplete timeout completed');\n\n        this.emit('iceTimeout');\n        this.emit('_iceComplete');\n      }\n    }, this.iceCompleteTimeout);\n  }\n\n  _createOffer() {\n    if (this.destroyed) return;\n\n    this._pc.createOffer(this.offerOptions).then(offer => {\n      if (this.destroyed) return;\n      if (!this.trickle && !this.allowHalfTrickle) offer.sdp = filterTrickle(offer.sdp);\n      offer.sdp = this.sdpTransform(offer.sdp);\n\n      const sendOffer = () => {\n        if (this.destroyed) return;\n        const signal = this._pc.localDescription || offer;\n\n        this._debug('signal');\n\n        this.emit('signal', {\n          type: signal.type,\n          sdp: signal.sdp\n        });\n      };\n\n      const onSuccess = () => {\n        this._debug('createOffer success');\n\n        if (this.destroyed) return;\n        if (this.trickle || this._iceComplete) sendOffer();else this.once('_iceComplete', sendOffer); // wait for candidates\n      };\n\n      const onError = err => {\n        this.destroy(errCode(err, 'ERR_SET_LOCAL_DESCRIPTION'));\n      };\n\n      this._pc.setLocalDescription(offer).then(onSuccess).catch(onError);\n    }).catch(err => {\n      this.destroy(errCode(err, 'ERR_CREATE_OFFER'));\n    });\n  }\n\n  _requestMissingTransceivers() {\n    if (this._pc.getTransceivers) {\n      this._pc.getTransceivers().forEach(transceiver => {\n        if (!transceiver.mid && transceiver.sender.track && !transceiver.requested) {\n          transceiver.requested = true; // HACK: Safari returns negotiated transceivers with a null mid\n\n          this.addTransceiver(transceiver.sender.track.kind);\n        }\n      });\n    }\n  }\n\n  _createAnswer() {\n    if (this.destroyed) return;\n\n    this._pc.createAnswer(this.answerOptions).then(answer => {\n      if (this.destroyed) return;\n      if (!this.trickle && !this.allowHalfTrickle) answer.sdp = filterTrickle(answer.sdp);\n      answer.sdp = this.sdpTransform(answer.sdp);\n\n      const sendAnswer = () => {\n        if (this.destroyed) return;\n        const signal = this._pc.localDescription || answer;\n\n        this._debug('signal');\n\n        this.emit('signal', {\n          type: signal.type,\n          sdp: signal.sdp\n        });\n        if (!this.initiator) this._requestMissingTransceivers();\n      };\n\n      const onSuccess = () => {\n        if (this.destroyed) return;\n        if (this.trickle || this._iceComplete) sendAnswer();else this.once('_iceComplete', sendAnswer);\n      };\n\n      const onError = err => {\n        this.destroy(errCode(err, 'ERR_SET_LOCAL_DESCRIPTION'));\n      };\n\n      this._pc.setLocalDescription(answer).then(onSuccess).catch(onError);\n    }).catch(err => {\n      this.destroy(errCode(err, 'ERR_CREATE_ANSWER'));\n    });\n  }\n\n  _onConnectionStateChange() {\n    if (this.destroyed) return;\n\n    if (this._pc.connectionState === 'failed') {\n      this.destroy(errCode(new Error('Connection failed.'), 'ERR_CONNECTION_FAILURE'));\n    }\n  }\n\n  _onIceStateChange() {\n    if (this.destroyed) return;\n    const iceConnectionState = this._pc.iceConnectionState;\n    const iceGatheringState = this._pc.iceGatheringState;\n\n    this._debug('iceStateChange (connection: %s) (gathering: %s)', iceConnectionState, iceGatheringState);\n\n    this.emit('iceStateChange', iceConnectionState, iceGatheringState);\n\n    if (iceConnectionState === 'connected' || iceConnectionState === 'completed') {\n      this._pcReady = true;\n\n      this._maybeReady();\n    }\n\n    if (iceConnectionState === 'failed') {\n      this.destroy(errCode(new Error('Ice connection failed.'), 'ERR_ICE_CONNECTION_FAILURE'));\n    }\n\n    if (iceConnectionState === 'closed') {\n      this.destroy(errCode(new Error('Ice connection closed.'), 'ERR_ICE_CONNECTION_CLOSED'));\n    }\n  }\n\n  getStats(cb) {\n    // statreports can come with a value array instead of properties\n    const flattenValues = report => {\n      if (Object.prototype.toString.call(report.values) === '[object Array]') {\n        report.values.forEach(value => {\n          Object.assign(report, value);\n        });\n      }\n\n      return report;\n    }; // Promise-based getStats() (standard)\n\n\n    if (this._pc.getStats.length === 0 || this._isReactNativeWebrtc) {\n      this._pc.getStats().then(res => {\n        const reports = [];\n        res.forEach(report => {\n          reports.push(flattenValues(report));\n        });\n        cb(null, reports);\n      }, err => cb(err)); // Single-parameter callback-based getStats() (non-standard)\n\n    } else if (this._pc.getStats.length > 0) {\n      this._pc.getStats(res => {\n        // If we destroy connection in `connect` callback this code might happen to run when actual connection is already closed\n        if (this.destroyed) return;\n        const reports = [];\n        res.result().forEach(result => {\n          const report = {};\n          result.names().forEach(name => {\n            report[name] = result.stat(name);\n          });\n          report.id = result.id;\n          report.type = result.type;\n          report.timestamp = result.timestamp;\n          reports.push(flattenValues(report));\n        });\n        cb(null, reports);\n      }, err => cb(err)); // Unknown browser, skip getStats() since it's anyone's guess which style of\n      // getStats() they implement.\n\n    } else {\n      cb(null, []);\n    }\n  }\n\n  _maybeReady() {\n    this._debug('maybeReady pc %s channel %s', this._pcReady, this._channelReady);\n\n    if (this._connected || this._connecting || !this._pcReady || !this._channelReady) return;\n    this._connecting = true; // HACK: We can't rely on order here, for details see https://github.com/js-platform/node-webrtc/issues/339\n\n    const findCandidatePair = () => {\n      if (this.destroyed) return;\n      this.getStats((err, items) => {\n        if (this.destroyed) return; // Treat getStats error as non-fatal. It's not essential.\n\n        if (err) items = [];\n        const remoteCandidates = {};\n        const localCandidates = {};\n        const candidatePairs = {};\n        let foundSelectedCandidatePair = false;\n        items.forEach(item => {\n          // TODO: Once all browsers support the hyphenated stats report types, remove\n          // the non-hypenated ones\n          if (item.type === 'remotecandidate' || item.type === 'remote-candidate') {\n            remoteCandidates[item.id] = item;\n          }\n\n          if (item.type === 'localcandidate' || item.type === 'local-candidate') {\n            localCandidates[item.id] = item;\n          }\n\n          if (item.type === 'candidatepair' || item.type === 'candidate-pair') {\n            candidatePairs[item.id] = item;\n          }\n        });\n\n        const setSelectedCandidatePair = selectedCandidatePair => {\n          foundSelectedCandidatePair = true;\n          let local = localCandidates[selectedCandidatePair.localCandidateId];\n\n          if (local && (local.ip || local.address)) {\n            // Spec\n            this.localAddress = local.ip || local.address;\n            this.localPort = Number(local.port);\n          } else if (local && local.ipAddress) {\n            // Firefox\n            this.localAddress = local.ipAddress;\n            this.localPort = Number(local.portNumber);\n          } else if (typeof selectedCandidatePair.googLocalAddress === 'string') {\n            // TODO: remove this once Chrome 58 is released\n            local = selectedCandidatePair.googLocalAddress.split(':');\n            this.localAddress = local[0];\n            this.localPort = Number(local[1]);\n          }\n\n          if (this.localAddress) {\n            this.localFamily = this.localAddress.includes(':') ? 'IPv6' : 'IPv4';\n          }\n\n          let remote = remoteCandidates[selectedCandidatePair.remoteCandidateId];\n\n          if (remote && (remote.ip || remote.address)) {\n            // Spec\n            this.remoteAddress = remote.ip || remote.address;\n            this.remotePort = Number(remote.port);\n          } else if (remote && remote.ipAddress) {\n            // Firefox\n            this.remoteAddress = remote.ipAddress;\n            this.remotePort = Number(remote.portNumber);\n          } else if (typeof selectedCandidatePair.googRemoteAddress === 'string') {\n            // TODO: remove this once Chrome 58 is released\n            remote = selectedCandidatePair.googRemoteAddress.split(':');\n            this.remoteAddress = remote[0];\n            this.remotePort = Number(remote[1]);\n          }\n\n          if (this.remoteAddress) {\n            this.remoteFamily = this.remoteAddress.includes(':') ? 'IPv6' : 'IPv4';\n          }\n\n          this._debug('connect local: %s:%s remote: %s:%s', this.localAddress, this.localPort, this.remoteAddress, this.remotePort);\n        };\n\n        items.forEach(item => {\n          // Spec-compliant\n          if (item.type === 'transport' && item.selectedCandidatePairId) {\n            setSelectedCandidatePair(candidatePairs[item.selectedCandidatePairId]);\n          } // Old implementations\n\n\n          if (item.type === 'googCandidatePair' && item.googActiveConnection === 'true' || (item.type === 'candidatepair' || item.type === 'candidate-pair') && item.selected) {\n            setSelectedCandidatePair(item);\n          }\n        }); // Ignore candidate pair selection in browsers like Safari 11 that do not have any local or remote candidates\n        // But wait until at least 1 candidate pair is available\n\n        if (!foundSelectedCandidatePair && (!Object.keys(candidatePairs).length || Object.keys(localCandidates).length)) {\n          setTimeout(findCandidatePair, 100);\n          return;\n        } else {\n          this._connecting = false;\n          this._connected = true;\n        }\n\n        if (this._chunk) {\n          try {\n            this.send(this._chunk);\n          } catch (err) {\n            return this.destroy(errCode(err, 'ERR_DATA_CHANNEL'));\n          }\n\n          this._chunk = null;\n\n          this._debug('sent chunk from \"write before connect\"');\n\n          const cb = this._cb;\n          this._cb = null;\n          cb(null);\n        } // If `bufferedAmountLowThreshold` and 'onbufferedamountlow' are unsupported,\n        // fallback to using setInterval to implement backpressure.\n\n\n        if (typeof this._channel.bufferedAmountLowThreshold !== 'number') {\n          this._interval = setInterval(() => this._onInterval(), 150);\n          if (this._interval.unref) this._interval.unref();\n        }\n\n        this._debug('connect');\n\n        this.emit('connect');\n      });\n    };\n\n    findCandidatePair();\n  }\n\n  _onInterval() {\n    if (!this._cb || !this._channel || this._channel.bufferedAmount > MAX_BUFFERED_AMOUNT) {\n      return;\n    }\n\n    this._onChannelBufferedAmountLow();\n  }\n\n  _onSignalingStateChange() {\n    if (this.destroyed) return;\n\n    if (this._pc.signalingState === 'stable') {\n      this._isNegotiating = false; // HACK: Firefox doesn't yet support removing tracks when signalingState !== 'stable'\n\n      this._debug('flushing sender queue', this._sendersAwaitingStable);\n\n      this._sendersAwaitingStable.forEach(sender => {\n        this._pc.removeTrack(sender);\n\n        this._queuedNegotiation = true;\n      });\n\n      this._sendersAwaitingStable = [];\n\n      if (this._queuedNegotiation) {\n        this._debug('flushing negotiation queue');\n\n        this._queuedNegotiation = false;\n\n        this._needsNegotiation(); // negotiate again\n\n      } else {\n        this._debug('negotiated');\n\n        this.emit('negotiated');\n      }\n    }\n\n    this._debug('signalingStateChange %s', this._pc.signalingState);\n\n    this.emit('signalingStateChange', this._pc.signalingState);\n  }\n\n  _onIceCandidate(event) {\n    if (this.destroyed) return;\n\n    if (event.candidate && this.trickle) {\n      this.emit('signal', {\n        type: 'candidate',\n        candidate: {\n          candidate: event.candidate.candidate,\n          sdpMLineIndex: event.candidate.sdpMLineIndex,\n          sdpMid: event.candidate.sdpMid\n        }\n      });\n    } else if (!event.candidate && !this._iceComplete) {\n      this._iceComplete = true;\n      this.emit('_iceComplete');\n    } // as soon as we've received one valid candidate start timeout\n\n\n    if (event.candidate) {\n      this._startIceCompleteTimeout();\n    }\n  }\n\n  _onChannelMessage(event) {\n    if (this.destroyed) return;\n    let data = event.data;\n    if (data instanceof ArrayBuffer) data = Buffer.from(data);\n    this.push(data);\n  }\n\n  _onChannelBufferedAmountLow() {\n    if (this.destroyed || !this._cb) return;\n\n    this._debug('ending backpressure: bufferedAmount %d', this._channel.bufferedAmount);\n\n    const cb = this._cb;\n    this._cb = null;\n    cb(null);\n  }\n\n  _onChannelOpen() {\n    if (this._connected || this.destroyed) return;\n\n    this._debug('on channel open');\n\n    this._channelReady = true;\n\n    this._maybeReady();\n  }\n\n  _onChannelClose() {\n    if (this.destroyed) return;\n\n    this._debug('on channel close');\n\n    this.destroy();\n  }\n\n  _onTrack(event) {\n    if (this.destroyed) return;\n    event.streams.forEach(eventStream => {\n      this._debug('on track');\n\n      this.emit('track', event.track, eventStream);\n\n      this._remoteTracks.push({\n        track: event.track,\n        stream: eventStream\n      });\n\n      if (this._remoteStreams.some(remoteStream => {\n        return remoteStream.id === eventStream.id;\n      })) return; // Only fire one 'stream' event, even though there may be multiple tracks per stream\n\n      this._remoteStreams.push(eventStream);\n\n      queueMicrotask(() => {\n        this._debug('on stream');\n\n        this.emit('stream', eventStream); // ensure all tracks have been added\n      });\n    });\n  }\n\n  _debug() {\n    const args = [].slice.call(arguments);\n    args[0] = '[' + this._id + '] ' + args[0];\n    debug.apply(null, args);\n  }\n\n}\n\nPeer.WEBRTC_SUPPORT = !!getBrowserRTC();\n/**\n * Expose peer and data channel config for overriding all Peer\n * instances. Otherwise, just set opts.config or opts.channelConfig\n * when constructing a Peer.\n */\n\nPeer.config = {\n  iceServers: [{\n    urls: ['stun:stun.l.google.com:19302', 'stun:global.stun.twilio.com:3478']\n  }],\n  sdpSemantics: 'unified-plan'\n};\nPeer.channelConfig = {};\nmodule.exports = Peer;","map":{"version":3,"sources":["D:/Backend new/client/node_modules/simple-peer/index.js"],"names":["debug","require","getBrowserRTC","randombytes","stream","queueMicrotask","errCode","Buffer","MAX_BUFFERED_AMOUNT","ICECOMPLETE_TIMEOUT","CHANNEL_CLOSING_TIMEOUT","filterTrickle","sdp","replace","warn","message","console","Peer","Duplex","constructor","opts","Object","assign","allowHalfOpen","_id","toString","slice","_debug","channelName","initiator","channelConfig","channelNegotiated","negotiated","config","offerOptions","answerOptions","sdpTransform","streams","trickle","undefined","allowHalfTrickle","iceCompleteTimeout","destroyed","destroying","_connected","remoteAddress","remoteFamily","remotePort","localAddress","localFamily","localPort","_wrtc","wrtc","window","Error","_pcReady","_channelReady","_iceComplete","_iceCompleteTimer","_channel","_pendingCandidates","_isNegotiating","_firstNegotiation","_batchedNegotiation","_queuedNegotiation","_sendersAwaitingStable","_senderMap","Map","_closingInterval","_remoteTracks","_remoteStreams","_chunk","_cb","_interval","_pc","RTCPeerConnection","err","destroy","_isReactNativeWebrtc","_peerConnectionId","oniceconnectionstatechange","_onIceStateChange","onicegatheringstatechange","onconnectionstatechange","_onConnectionStateChange","onsignalingstatechange","_onSignalingStateChange","onicecandidate","event","_onIceCandidate","peerIdentity","catch","_setupData","channel","createDataChannel","ondatachannel","forEach","addStream","ontrack","_onTrack","_needsNegotiation","_onFinishBound","_onFinish","once","bufferSize","bufferedAmount","connected","readyState","address","port","family","signal","data","JSON","parse","renegotiate","transceiverRequest","addTransceiver","kind","init","candidate","remoteDescription","type","_addIceCandidate","push","setRemoteDescription","RTCSessionDescription","then","_createAnswer","iceCandidateObj","RTCIceCandidate","addIceCandidate","endsWith","send","chunk","emit","getTracks","track","addTrack","submap","get","sender","set","removed","replaceTrack","oldTrack","newTrack","removeTrack","name","removeStream","negotiate","setTimeout","_createOffer","_destroy","cb","readable","writable","_readableState","ended","_writableState","finished","end","clearInterval","removeListener","close","onmessage","onopen","onclose","onerror","binaryType","bufferedAmountLowThreshold","label","_onChannelMessage","onbufferedamountlow","_onChannelBufferedAmountLow","_onChannelOpen","_onChannelClose","isClosing","setInterval","_read","_write","encoding","destroySoon","_startIceCompleteTimeout","createOffer","offer","sendOffer","localDescription","onSuccess","onError","setLocalDescription","_requestMissingTransceivers","getTransceivers","transceiver","mid","requested","createAnswer","answer","sendAnswer","connectionState","iceConnectionState","iceGatheringState","_maybeReady","getStats","flattenValues","report","prototype","call","values","value","length","res","reports","result","names","stat","id","timestamp","_connecting","findCandidatePair","items","remoteCandidates","localCandidates","candidatePairs","foundSelectedCandidatePair","item","setSelectedCandidatePair","selectedCandidatePair","local","localCandidateId","ip","Number","ipAddress","portNumber","googLocalAddress","split","includes","remote","remoteCandidateId","googRemoteAddress","selectedCandidatePairId","googActiveConnection","selected","keys","_onInterval","unref","signalingState","sdpMLineIndex","sdpMid","ArrayBuffer","from","eventStream","some","remoteStream","args","arguments","apply","WEBRTC_SUPPORT","iceServers","urls","sdpSemantics","module","exports"],"mappings":"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","sourcesContent":["/*! simple-peer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nconst debug = require('debug')('simple-peer')\nconst getBrowserRTC = require('get-browser-rtc')\nconst randombytes = require('randombytes')\nconst stream = require('readable-stream')\nconst queueMicrotask = require('queue-microtask') // TODO: remove when Node 10 is not supported\nconst errCode = require('err-code')\nconst { Buffer } = require('buffer')\n\nconst MAX_BUFFERED_AMOUNT = 64 * 1024\nconst ICECOMPLETE_TIMEOUT = 5 * 1000\nconst CHANNEL_CLOSING_TIMEOUT = 5 * 1000\n\n// HACK: Filter trickle lines when trickle is disabled #354\nfunction filterTrickle (sdp) {\n  return sdp.replace(/a=ice-options:trickle\\s\\n/g, '')\n}\n\nfunction warn (message) {\n  console.warn(message)\n}\n\n/**\n * WebRTC peer connection. Same API as node core `net.Socket`, plus a few extra methods.\n * Duplex stream.\n * @param {Object} opts\n */\nclass Peer extends stream.Duplex {\n  constructor (opts) {\n    opts = Object.assign({\n      allowHalfOpen: false\n    }, opts)\n\n    super(opts)\n\n    this._id = randombytes(4).toString('hex').slice(0, 7)\n    this._debug('new peer %o', opts)\n\n    this.channelName = opts.initiator\n      ? opts.channelName || randombytes(20).toString('hex')\n      : null\n\n    this.initiator = opts.initiator || false\n    this.channelConfig = opts.channelConfig || Peer.channelConfig\n    this.channelNegotiated = this.channelConfig.negotiated\n    this.config = Object.assign({}, Peer.config, opts.config)\n    this.offerOptions = opts.offerOptions || {}\n    this.answerOptions = opts.answerOptions || {}\n    this.sdpTransform = opts.sdpTransform || (sdp => sdp)\n    this.streams = opts.streams || (opts.stream ? [opts.stream] : []) // support old \"stream\" option\n    this.trickle = opts.trickle !== undefined ? opts.trickle : true\n    this.allowHalfTrickle = opts.allowHalfTrickle !== undefined ? opts.allowHalfTrickle : false\n    this.iceCompleteTimeout = opts.iceCompleteTimeout || ICECOMPLETE_TIMEOUT\n\n    this.destroyed = false\n    this.destroying = false\n    this._connected = false\n\n    this.remoteAddress = undefined\n    this.remoteFamily = undefined\n    this.remotePort = undefined\n    this.localAddress = undefined\n    this.localFamily = undefined\n    this.localPort = undefined\n\n    this._wrtc = (opts.wrtc && typeof opts.wrtc === 'object')\n      ? opts.wrtc\n      : getBrowserRTC()\n\n    if (!this._wrtc) {\n      if (typeof window === 'undefined') {\n        throw errCode(new Error('No WebRTC support: Specify `opts.wrtc` option in this environment'), 'ERR_WEBRTC_SUPPORT')\n      } else {\n        throw errCode(new Error('No WebRTC support: Not a supported browser'), 'ERR_WEBRTC_SUPPORT')\n      }\n    }\n\n    this._pcReady = false\n    this._channelReady = false\n    this._iceComplete = false // ice candidate trickle done (got null candidate)\n    this._iceCompleteTimer = null // send an offer/answer anyway after some timeout\n    this._channel = null\n    this._pendingCandidates = []\n\n    this._isNegotiating = false // is this peer waiting for negotiation to complete?\n    this._firstNegotiation = true\n    this._batchedNegotiation = false // batch synchronous negotiations\n    this._queuedNegotiation = false // is there a queued negotiation request?\n    this._sendersAwaitingStable = []\n    this._senderMap = new Map()\n    this._closingInterval = null\n\n    this._remoteTracks = []\n    this._remoteStreams = []\n\n    this._chunk = null\n    this._cb = null\n    this._interval = null\n\n    try {\n      this._pc = new (this._wrtc.RTCPeerConnection)(this.config)\n    } catch (err) {\n      this.destroy(errCode(err, 'ERR_PC_CONSTRUCTOR'))\n      return\n    }\n\n    // We prefer feature detection whenever possible, but sometimes that's not\n    // possible for certain implementations.\n    this._isReactNativeWebrtc = typeof this._pc._peerConnectionId === 'number'\n\n    this._pc.oniceconnectionstatechange = () => {\n      this._onIceStateChange()\n    }\n    this._pc.onicegatheringstatechange = () => {\n      this._onIceStateChange()\n    }\n    this._pc.onconnectionstatechange = () => {\n      this._onConnectionStateChange()\n    }\n    this._pc.onsignalingstatechange = () => {\n      this._onSignalingStateChange()\n    }\n    this._pc.onicecandidate = event => {\n      this._onIceCandidate(event)\n    }\n\n    // HACK: Fix for odd Firefox behavior, see: https://github.com/feross/simple-peer/pull/783\n    if (typeof this._pc.peerIdentity === 'object') {\n      this._pc.peerIdentity.catch(err => {\n        this.destroy(errCode(err, 'ERR_PC_PEER_IDENTITY'))\n      })\n    }\n\n    // Other spec events, unused by this implementation:\n    // - onconnectionstatechange\n    // - onicecandidateerror\n    // - onfingerprintfailure\n    // - onnegotiationneeded\n\n    if (this.initiator || this.channelNegotiated) {\n      this._setupData({\n        channel: this._pc.createDataChannel(this.channelName, this.channelConfig)\n      })\n    } else {\n      this._pc.ondatachannel = event => {\n        this._setupData(event)\n      }\n    }\n\n    if (this.streams) {\n      this.streams.forEach(stream => {\n        this.addStream(stream)\n      })\n    }\n    this._pc.ontrack = event => {\n      this._onTrack(event)\n    }\n\n    this._debug('initial negotiation')\n    this._needsNegotiation()\n\n    this._onFinishBound = () => {\n      this._onFinish()\n    }\n    this.once('finish', this._onFinishBound)\n  }\n\n  get bufferSize () {\n    return (this._channel && this._channel.bufferedAmount) || 0\n  }\n\n  // HACK: it's possible channel.readyState is \"closing\" before peer.destroy() fires\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=882743\n  get connected () {\n    return (this._connected && this._channel.readyState === 'open')\n  }\n\n  address () {\n    return { port: this.localPort, family: this.localFamily, address: this.localAddress }\n  }\n\n  signal (data) {\n    if (this.destroying) return\n    if (this.destroyed) throw errCode(new Error('cannot signal after peer is destroyed'), 'ERR_DESTROYED')\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data)\n      } catch (err) {\n        data = {}\n      }\n    }\n    this._debug('signal()')\n\n    if (data.renegotiate && this.initiator) {\n      this._debug('got request to renegotiate')\n      this._needsNegotiation()\n    }\n    if (data.transceiverRequest && this.initiator) {\n      this._debug('got request for transceiver')\n      this.addTransceiver(data.transceiverRequest.kind, data.transceiverRequest.init)\n    }\n    if (data.candidate) {\n      if (this._pc.remoteDescription && this._pc.remoteDescription.type) {\n        this._addIceCandidate(data.candidate)\n      } else {\n        this._pendingCandidates.push(data.candidate)\n      }\n    }\n    if (data.sdp) {\n      this._pc.setRemoteDescription(new (this._wrtc.RTCSessionDescription)(data))\n        .then(() => {\n          if (this.destroyed) return\n\n          this._pendingCandidates.forEach(candidate => {\n            this._addIceCandidate(candidate)\n          })\n          this._pendingCandidates = []\n\n          if (this._pc.remoteDescription.type === 'offer') this._createAnswer()\n        })\n        .catch(err => {\n          this.destroy(errCode(err, 'ERR_SET_REMOTE_DESCRIPTION'))\n        })\n    }\n    if (!data.sdp && !data.candidate && !data.renegotiate && !data.transceiverRequest) {\n      this.destroy(errCode(new Error('signal() called with invalid signal data'), 'ERR_SIGNALING'))\n    }\n  }\n\n  _addIceCandidate (candidate) {\n    const iceCandidateObj = new this._wrtc.RTCIceCandidate(candidate)\n    this._pc.addIceCandidate(iceCandidateObj)\n      .catch(err => {\n        if (!iceCandidateObj.address || iceCandidateObj.address.endsWith('.local')) {\n          warn('Ignoring unsupported ICE candidate.')\n        } else {\n          this.destroy(errCode(err, 'ERR_ADD_ICE_CANDIDATE'))\n        }\n      })\n  }\n\n  /**\n   * Send text/binary data to the remote peer.\n   * @param {ArrayBufferView|ArrayBuffer|Buffer|string|Blob} chunk\n   */\n  send (chunk) {\n    if (this.destroying) return\n    if (this.destroyed) throw errCode(new Error('cannot send after peer is destroyed'), 'ERR_DESTROYED')\n    this._channel.send(chunk)\n  }\n\n  /**\n   * Add a Transceiver to the connection.\n   * @param {String} kind\n   * @param {Object} init\n   */\n  addTransceiver (kind, init) {\n    if (this.destroying) return\n    if (this.destroyed) throw errCode(new Error('cannot addTransceiver after peer is destroyed'), 'ERR_DESTROYED')\n    this._debug('addTransceiver()')\n\n    if (this.initiator) {\n      try {\n        this._pc.addTransceiver(kind, init)\n        this._needsNegotiation()\n      } catch (err) {\n        this.destroy(errCode(err, 'ERR_ADD_TRANSCEIVER'))\n      }\n    } else {\n      this.emit('signal', { // request initiator to renegotiate\n        type: 'transceiverRequest',\n        transceiverRequest: { kind, init }\n      })\n    }\n  }\n\n  /**\n   * Add a MediaStream to the connection.\n   * @param {MediaStream} stream\n   */\n  addStream (stream) {\n    if (this.destroying) return\n    if (this.destroyed) throw errCode(new Error('cannot addStream after peer is destroyed'), 'ERR_DESTROYED')\n    this._debug('addStream()')\n\n    stream.getTracks().forEach(track => {\n      this.addTrack(track, stream)\n    })\n  }\n\n  /**\n   * Add a MediaStreamTrack to the connection.\n   * @param {MediaStreamTrack} track\n   * @param {MediaStream} stream\n   */\n  addTrack (track, stream) {\n    if (this.destroying) return\n    if (this.destroyed) throw errCode(new Error('cannot addTrack after peer is destroyed'), 'ERR_DESTROYED')\n    this._debug('addTrack()')\n\n    const submap = this._senderMap.get(track) || new Map() // nested Maps map [track, stream] to sender\n    let sender = submap.get(stream)\n    if (!sender) {\n      sender = this._pc.addTrack(track, stream)\n      submap.set(stream, sender)\n      this._senderMap.set(track, submap)\n      this._needsNegotiation()\n    } else if (sender.removed) {\n      throw errCode(new Error('Track has been removed. You should enable/disable tracks that you want to re-add.'), 'ERR_SENDER_REMOVED')\n    } else {\n      throw errCode(new Error('Track has already been added to that stream.'), 'ERR_SENDER_ALREADY_ADDED')\n    }\n  }\n\n  /**\n   * Replace a MediaStreamTrack by another in the connection.\n   * @param {MediaStreamTrack} oldTrack\n   * @param {MediaStreamTrack} newTrack\n   * @param {MediaStream} stream\n   */\n  replaceTrack (oldTrack, newTrack, stream) {\n    if (this.destroying) return\n    if (this.destroyed) throw errCode(new Error('cannot replaceTrack after peer is destroyed'), 'ERR_DESTROYED')\n    this._debug('replaceTrack()')\n\n    const submap = this._senderMap.get(oldTrack)\n    const sender = submap ? submap.get(stream) : null\n    if (!sender) {\n      throw errCode(new Error('Cannot replace track that was never added.'), 'ERR_TRACK_NOT_ADDED')\n    }\n    if (newTrack) this._senderMap.set(newTrack, submap)\n\n    if (sender.replaceTrack != null) {\n      sender.replaceTrack(newTrack)\n    } else {\n      this.destroy(errCode(new Error('replaceTrack is not supported in this browser'), 'ERR_UNSUPPORTED_REPLACETRACK'))\n    }\n  }\n\n  /**\n   * Remove a MediaStreamTrack from the connection.\n   * @param {MediaStreamTrack} track\n   * @param {MediaStream} stream\n   */\n  removeTrack (track, stream) {\n    if (this.destroying) return\n    if (this.destroyed) throw errCode(new Error('cannot removeTrack after peer is destroyed'), 'ERR_DESTROYED')\n    this._debug('removeSender()')\n\n    const submap = this._senderMap.get(track)\n    const sender = submap ? submap.get(stream) : null\n    if (!sender) {\n      throw errCode(new Error('Cannot remove track that was never added.'), 'ERR_TRACK_NOT_ADDED')\n    }\n    try {\n      sender.removed = true\n      this._pc.removeTrack(sender)\n    } catch (err) {\n      if (err.name === 'NS_ERROR_UNEXPECTED') {\n        this._sendersAwaitingStable.push(sender) // HACK: Firefox must wait until (signalingState === stable) https://bugzilla.mozilla.org/show_bug.cgi?id=1133874\n      } else {\n        this.destroy(errCode(err, 'ERR_REMOVE_TRACK'))\n      }\n    }\n    this._needsNegotiation()\n  }\n\n  /**\n   * Remove a MediaStream from the connection.\n   * @param {MediaStream} stream\n   */\n  removeStream (stream) {\n    if (this.destroying) return\n    if (this.destroyed) throw errCode(new Error('cannot removeStream after peer is destroyed'), 'ERR_DESTROYED')\n    this._debug('removeSenders()')\n\n    stream.getTracks().forEach(track => {\n      this.removeTrack(track, stream)\n    })\n  }\n\n  _needsNegotiation () {\n    this._debug('_needsNegotiation')\n    if (this._batchedNegotiation) return // batch synchronous renegotiations\n    this._batchedNegotiation = true\n    queueMicrotask(() => {\n      this._batchedNegotiation = false\n      if (this.initiator || !this._firstNegotiation) {\n        this._debug('starting batched negotiation')\n        this.negotiate()\n      } else {\n        this._debug('non-initiator initial negotiation request discarded')\n      }\n      this._firstNegotiation = false\n    })\n  }\n\n  negotiate () {\n    if (this.destroying) return\n    if (this.destroyed) throw errCode(new Error('cannot negotiate after peer is destroyed'), 'ERR_DESTROYED')\n\n    if (this.initiator) {\n      if (this._isNegotiating) {\n        this._queuedNegotiation = true\n        this._debug('already negotiating, queueing')\n      } else {\n        this._debug('start negotiation')\n        setTimeout(() => { // HACK: Chrome crashes if we immediately call createOffer\n          this._createOffer()\n        }, 0)\n      }\n    } else {\n      if (this._isNegotiating) {\n        this._queuedNegotiation = true\n        this._debug('already negotiating, queueing')\n      } else {\n        this._debug('requesting negotiation from initiator')\n        this.emit('signal', { // request initiator to renegotiate\n          type: 'renegotiate',\n          renegotiate: true\n        })\n      }\n    }\n    this._isNegotiating = true\n  }\n\n  // TODO: Delete this method once readable-stream is updated to contain a default\n  // implementation of destroy() that automatically calls _destroy()\n  // See: https://github.com/nodejs/readable-stream/issues/283\n  destroy (err) {\n    this._destroy(err, () => {})\n  }\n\n  _destroy (err, cb) {\n    if (this.destroyed || this.destroying) return\n    this.destroying = true\n\n    this._debug('destroying (error: %s)', err && (err.message || err))\n\n    queueMicrotask(() => { // allow events concurrent with the call to _destroy() to fire (see #692)\n      this.destroyed = true\n      this.destroying = false\n\n      this._debug('destroy (error: %s)', err && (err.message || err))\n\n      this.readable = this.writable = false\n\n      if (!this._readableState.ended) this.push(null)\n      if (!this._writableState.finished) this.end()\n\n      this._connected = false\n      this._pcReady = false\n      this._channelReady = false\n      this._remoteTracks = null\n      this._remoteStreams = null\n      this._senderMap = null\n\n      clearInterval(this._closingInterval)\n      this._closingInterval = null\n\n      clearInterval(this._interval)\n      this._interval = null\n      this._chunk = null\n      this._cb = null\n\n      if (this._onFinishBound) this.removeListener('finish', this._onFinishBound)\n      this._onFinishBound = null\n\n      if (this._channel) {\n        try {\n          this._channel.close()\n        } catch (err) {}\n\n        // allow events concurrent with destruction to be handled\n        this._channel.onmessage = null\n        this._channel.onopen = null\n        this._channel.onclose = null\n        this._channel.onerror = null\n      }\n      if (this._pc) {\n        try {\n          this._pc.close()\n        } catch (err) {}\n\n        // allow events concurrent with destruction to be handled\n        this._pc.oniceconnectionstatechange = null\n        this._pc.onicegatheringstatechange = null\n        this._pc.onsignalingstatechange = null\n        this._pc.onicecandidate = null\n        this._pc.ontrack = null\n        this._pc.ondatachannel = null\n      }\n      this._pc = null\n      this._channel = null\n\n      if (err) this.emit('error', err)\n      this.emit('close')\n      cb()\n    })\n  }\n\n  _setupData (event) {\n    if (!event.channel) {\n      // In some situations `pc.createDataChannel()` returns `undefined` (in wrtc),\n      // which is invalid behavior. Handle it gracefully.\n      // See: https://github.com/feross/simple-peer/issues/163\n      return this.destroy(errCode(new Error('Data channel event is missing `channel` property'), 'ERR_DATA_CHANNEL'))\n    }\n\n    this._channel = event.channel\n    this._channel.binaryType = 'arraybuffer'\n\n    if (typeof this._channel.bufferedAmountLowThreshold === 'number') {\n      this._channel.bufferedAmountLowThreshold = MAX_BUFFERED_AMOUNT\n    }\n\n    this.channelName = this._channel.label\n\n    this._channel.onmessage = event => {\n      this._onChannelMessage(event)\n    }\n    this._channel.onbufferedamountlow = () => {\n      this._onChannelBufferedAmountLow()\n    }\n    this._channel.onopen = () => {\n      this._onChannelOpen()\n    }\n    this._channel.onclose = () => {\n      this._onChannelClose()\n    }\n    this._channel.onerror = err => {\n      this.destroy(errCode(err, 'ERR_DATA_CHANNEL'))\n    }\n\n    // HACK: Chrome will sometimes get stuck in readyState \"closing\", let's check for this condition\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=882743\n    let isClosing = false\n    this._closingInterval = setInterval(() => { // No \"onclosing\" event\n      if (this._channel && this._channel.readyState === 'closing') {\n        if (isClosing) this._onChannelClose() // closing timed out: equivalent to onclose firing\n        isClosing = true\n      } else {\n        isClosing = false\n      }\n    }, CHANNEL_CLOSING_TIMEOUT)\n  }\n\n  _read () {}\n\n  _write (chunk, encoding, cb) {\n    if (this.destroyed) return cb(errCode(new Error('cannot write after peer is destroyed'), 'ERR_DATA_CHANNEL'))\n\n    if (this._connected) {\n      try {\n        this.send(chunk)\n      } catch (err) {\n        return this.destroy(errCode(err, 'ERR_DATA_CHANNEL'))\n      }\n      if (this._channel.bufferedAmount > MAX_BUFFERED_AMOUNT) {\n        this._debug('start backpressure: bufferedAmount %d', this._channel.bufferedAmount)\n        this._cb = cb\n      } else {\n        cb(null)\n      }\n    } else {\n      this._debug('write before connect')\n      this._chunk = chunk\n      this._cb = cb\n    }\n  }\n\n  // When stream finishes writing, close socket. Half open connections are not\n  // supported.\n  _onFinish () {\n    if (this.destroyed) return\n\n    // Wait a bit before destroying so the socket flushes.\n    // TODO: is there a more reliable way to accomplish this?\n    const destroySoon = () => {\n      setTimeout(() => this.destroy(), 1000)\n    }\n\n    if (this._connected) {\n      destroySoon()\n    } else {\n      this.once('connect', destroySoon)\n    }\n  }\n\n  _startIceCompleteTimeout () {\n    if (this.destroyed) return\n    if (this._iceCompleteTimer) return\n    this._debug('started iceComplete timeout')\n    this._iceCompleteTimer = setTimeout(() => {\n      if (!this._iceComplete) {\n        this._iceComplete = true\n        this._debug('iceComplete timeout completed')\n        this.emit('iceTimeout')\n        this.emit('_iceComplete')\n      }\n    }, this.iceCompleteTimeout)\n  }\n\n  _createOffer () {\n    if (this.destroyed) return\n\n    this._pc.createOffer(this.offerOptions)\n      .then(offer => {\n        if (this.destroyed) return\n        if (!this.trickle && !this.allowHalfTrickle) offer.sdp = filterTrickle(offer.sdp)\n        offer.sdp = this.sdpTransform(offer.sdp)\n\n        const sendOffer = () => {\n          if (this.destroyed) return\n          const signal = this._pc.localDescription || offer\n          this._debug('signal')\n          this.emit('signal', {\n            type: signal.type,\n            sdp: signal.sdp\n          })\n        }\n\n        const onSuccess = () => {\n          this._debug('createOffer success')\n          if (this.destroyed) return\n          if (this.trickle || this._iceComplete) sendOffer()\n          else this.once('_iceComplete', sendOffer) // wait for candidates\n        }\n\n        const onError = err => {\n          this.destroy(errCode(err, 'ERR_SET_LOCAL_DESCRIPTION'))\n        }\n\n        this._pc.setLocalDescription(offer)\n          .then(onSuccess)\n          .catch(onError)\n      })\n      .catch(err => {\n        this.destroy(errCode(err, 'ERR_CREATE_OFFER'))\n      })\n  }\n\n  _requestMissingTransceivers () {\n    if (this._pc.getTransceivers) {\n      this._pc.getTransceivers().forEach(transceiver => {\n        if (!transceiver.mid && transceiver.sender.track && !transceiver.requested) {\n          transceiver.requested = true // HACK: Safari returns negotiated transceivers with a null mid\n          this.addTransceiver(transceiver.sender.track.kind)\n        }\n      })\n    }\n  }\n\n  _createAnswer () {\n    if (this.destroyed) return\n\n    this._pc.createAnswer(this.answerOptions)\n      .then(answer => {\n        if (this.destroyed) return\n        if (!this.trickle && !this.allowHalfTrickle) answer.sdp = filterTrickle(answer.sdp)\n        answer.sdp = this.sdpTransform(answer.sdp)\n\n        const sendAnswer = () => {\n          if (this.destroyed) return\n          const signal = this._pc.localDescription || answer\n          this._debug('signal')\n          this.emit('signal', {\n            type: signal.type,\n            sdp: signal.sdp\n          })\n          if (!this.initiator) this._requestMissingTransceivers()\n        }\n\n        const onSuccess = () => {\n          if (this.destroyed) return\n          if (this.trickle || this._iceComplete) sendAnswer()\n          else this.once('_iceComplete', sendAnswer)\n        }\n\n        const onError = err => {\n          this.destroy(errCode(err, 'ERR_SET_LOCAL_DESCRIPTION'))\n        }\n\n        this._pc.setLocalDescription(answer)\n          .then(onSuccess)\n          .catch(onError)\n      })\n      .catch(err => {\n        this.destroy(errCode(err, 'ERR_CREATE_ANSWER'))\n      })\n  }\n\n  _onConnectionStateChange () {\n    if (this.destroyed) return\n    if (this._pc.connectionState === 'failed') {\n      this.destroy(errCode(new Error('Connection failed.'), 'ERR_CONNECTION_FAILURE'))\n    }\n  }\n\n  _onIceStateChange () {\n    if (this.destroyed) return\n    const iceConnectionState = this._pc.iceConnectionState\n    const iceGatheringState = this._pc.iceGatheringState\n\n    this._debug(\n      'iceStateChange (connection: %s) (gathering: %s)',\n      iceConnectionState,\n      iceGatheringState\n    )\n    this.emit('iceStateChange', iceConnectionState, iceGatheringState)\n\n    if (iceConnectionState === 'connected' || iceConnectionState === 'completed') {\n      this._pcReady = true\n      this._maybeReady()\n    }\n    if (iceConnectionState === 'failed') {\n      this.destroy(errCode(new Error('Ice connection failed.'), 'ERR_ICE_CONNECTION_FAILURE'))\n    }\n    if (iceConnectionState === 'closed') {\n      this.destroy(errCode(new Error('Ice connection closed.'), 'ERR_ICE_CONNECTION_CLOSED'))\n    }\n  }\n\n  getStats (cb) {\n    // statreports can come with a value array instead of properties\n    const flattenValues = report => {\n      if (Object.prototype.toString.call(report.values) === '[object Array]') {\n        report.values.forEach(value => {\n          Object.assign(report, value)\n        })\n      }\n      return report\n    }\n\n    // Promise-based getStats() (standard)\n    if (this._pc.getStats.length === 0 || this._isReactNativeWebrtc) {\n      this._pc.getStats()\n        .then(res => {\n          const reports = []\n          res.forEach(report => {\n            reports.push(flattenValues(report))\n          })\n          cb(null, reports)\n        }, err => cb(err))\n\n    // Single-parameter callback-based getStats() (non-standard)\n    } else if (this._pc.getStats.length > 0) {\n      this._pc.getStats(res => {\n        // If we destroy connection in `connect` callback this code might happen to run when actual connection is already closed\n        if (this.destroyed) return\n\n        const reports = []\n        res.result().forEach(result => {\n          const report = {}\n          result.names().forEach(name => {\n            report[name] = result.stat(name)\n          })\n          report.id = result.id\n          report.type = result.type\n          report.timestamp = result.timestamp\n          reports.push(flattenValues(report))\n        })\n        cb(null, reports)\n      }, err => cb(err))\n\n    // Unknown browser, skip getStats() since it's anyone's guess which style of\n    // getStats() they implement.\n    } else {\n      cb(null, [])\n    }\n  }\n\n  _maybeReady () {\n    this._debug('maybeReady pc %s channel %s', this._pcReady, this._channelReady)\n    if (this._connected || this._connecting || !this._pcReady || !this._channelReady) return\n\n    this._connecting = true\n\n    // HACK: We can't rely on order here, for details see https://github.com/js-platform/node-webrtc/issues/339\n    const findCandidatePair = () => {\n      if (this.destroyed) return\n\n      this.getStats((err, items) => {\n        if (this.destroyed) return\n\n        // Treat getStats error as non-fatal. It's not essential.\n        if (err) items = []\n\n        const remoteCandidates = {}\n        const localCandidates = {}\n        const candidatePairs = {}\n        let foundSelectedCandidatePair = false\n\n        items.forEach(item => {\n          // TODO: Once all browsers support the hyphenated stats report types, remove\n          // the non-hypenated ones\n          if (item.type === 'remotecandidate' || item.type === 'remote-candidate') {\n            remoteCandidates[item.id] = item\n          }\n          if (item.type === 'localcandidate' || item.type === 'local-candidate') {\n            localCandidates[item.id] = item\n          }\n          if (item.type === 'candidatepair' || item.type === 'candidate-pair') {\n            candidatePairs[item.id] = item\n          }\n        })\n\n        const setSelectedCandidatePair = selectedCandidatePair => {\n          foundSelectedCandidatePair = true\n\n          let local = localCandidates[selectedCandidatePair.localCandidateId]\n\n          if (local && (local.ip || local.address)) {\n            // Spec\n            this.localAddress = local.ip || local.address\n            this.localPort = Number(local.port)\n          } else if (local && local.ipAddress) {\n            // Firefox\n            this.localAddress = local.ipAddress\n            this.localPort = Number(local.portNumber)\n          } else if (typeof selectedCandidatePair.googLocalAddress === 'string') {\n            // TODO: remove this once Chrome 58 is released\n            local = selectedCandidatePair.googLocalAddress.split(':')\n            this.localAddress = local[0]\n            this.localPort = Number(local[1])\n          }\n          if (this.localAddress) {\n            this.localFamily = this.localAddress.includes(':') ? 'IPv6' : 'IPv4'\n          }\n\n          let remote = remoteCandidates[selectedCandidatePair.remoteCandidateId]\n\n          if (remote && (remote.ip || remote.address)) {\n            // Spec\n            this.remoteAddress = remote.ip || remote.address\n            this.remotePort = Number(remote.port)\n          } else if (remote && remote.ipAddress) {\n            // Firefox\n            this.remoteAddress = remote.ipAddress\n            this.remotePort = Number(remote.portNumber)\n          } else if (typeof selectedCandidatePair.googRemoteAddress === 'string') {\n            // TODO: remove this once Chrome 58 is released\n            remote = selectedCandidatePair.googRemoteAddress.split(':')\n            this.remoteAddress = remote[0]\n            this.remotePort = Number(remote[1])\n          }\n          if (this.remoteAddress) {\n            this.remoteFamily = this.remoteAddress.includes(':') ? 'IPv6' : 'IPv4'\n          }\n\n          this._debug(\n            'connect local: %s:%s remote: %s:%s',\n            this.localAddress,\n            this.localPort,\n            this.remoteAddress,\n            this.remotePort\n          )\n        }\n\n        items.forEach(item => {\n          // Spec-compliant\n          if (item.type === 'transport' && item.selectedCandidatePairId) {\n            setSelectedCandidatePair(candidatePairs[item.selectedCandidatePairId])\n          }\n\n          // Old implementations\n          if (\n            (item.type === 'googCandidatePair' && item.googActiveConnection === 'true') ||\n            ((item.type === 'candidatepair' || item.type === 'candidate-pair') && item.selected)\n          ) {\n            setSelectedCandidatePair(item)\n          }\n        })\n\n        // Ignore candidate pair selection in browsers like Safari 11 that do not have any local or remote candidates\n        // But wait until at least 1 candidate pair is available\n        if (!foundSelectedCandidatePair && (!Object.keys(candidatePairs).length || Object.keys(localCandidates).length)) {\n          setTimeout(findCandidatePair, 100)\n          return\n        } else {\n          this._connecting = false\n          this._connected = true\n        }\n\n        if (this._chunk) {\n          try {\n            this.send(this._chunk)\n          } catch (err) {\n            return this.destroy(errCode(err, 'ERR_DATA_CHANNEL'))\n          }\n          this._chunk = null\n          this._debug('sent chunk from \"write before connect\"')\n\n          const cb = this._cb\n          this._cb = null\n          cb(null)\n        }\n\n        // If `bufferedAmountLowThreshold` and 'onbufferedamountlow' are unsupported,\n        // fallback to using setInterval to implement backpressure.\n        if (typeof this._channel.bufferedAmountLowThreshold !== 'number') {\n          this._interval = setInterval(() => this._onInterval(), 150)\n          if (this._interval.unref) this._interval.unref()\n        }\n\n        this._debug('connect')\n        this.emit('connect')\n      })\n    }\n    findCandidatePair()\n  }\n\n  _onInterval () {\n    if (!this._cb || !this._channel || this._channel.bufferedAmount > MAX_BUFFERED_AMOUNT) {\n      return\n    }\n    this._onChannelBufferedAmountLow()\n  }\n\n  _onSignalingStateChange () {\n    if (this.destroyed) return\n\n    if (this._pc.signalingState === 'stable') {\n      this._isNegotiating = false\n\n      // HACK: Firefox doesn't yet support removing tracks when signalingState !== 'stable'\n      this._debug('flushing sender queue', this._sendersAwaitingStable)\n      this._sendersAwaitingStable.forEach(sender => {\n        this._pc.removeTrack(sender)\n        this._queuedNegotiation = true\n      })\n      this._sendersAwaitingStable = []\n\n      if (this._queuedNegotiation) {\n        this._debug('flushing negotiation queue')\n        this._queuedNegotiation = false\n        this._needsNegotiation() // negotiate again\n      } else {\n        this._debug('negotiated')\n        this.emit('negotiated')\n      }\n    }\n\n    this._debug('signalingStateChange %s', this._pc.signalingState)\n    this.emit('signalingStateChange', this._pc.signalingState)\n  }\n\n  _onIceCandidate (event) {\n    if (this.destroyed) return\n    if (event.candidate && this.trickle) {\n      this.emit('signal', {\n        type: 'candidate',\n        candidate: {\n          candidate: event.candidate.candidate,\n          sdpMLineIndex: event.candidate.sdpMLineIndex,\n          sdpMid: event.candidate.sdpMid\n        }\n      })\n    } else if (!event.candidate && !this._iceComplete) {\n      this._iceComplete = true\n      this.emit('_iceComplete')\n    }\n    // as soon as we've received one valid candidate start timeout\n    if (event.candidate) {\n      this._startIceCompleteTimeout()\n    }\n  }\n\n  _onChannelMessage (event) {\n    if (this.destroyed) return\n    let data = event.data\n    if (data instanceof ArrayBuffer) data = Buffer.from(data)\n    this.push(data)\n  }\n\n  _onChannelBufferedAmountLow () {\n    if (this.destroyed || !this._cb) return\n    this._debug('ending backpressure: bufferedAmount %d', this._channel.bufferedAmount)\n    const cb = this._cb\n    this._cb = null\n    cb(null)\n  }\n\n  _onChannelOpen () {\n    if (this._connected || this.destroyed) return\n    this._debug('on channel open')\n    this._channelReady = true\n    this._maybeReady()\n  }\n\n  _onChannelClose () {\n    if (this.destroyed) return\n    this._debug('on channel close')\n    this.destroy()\n  }\n\n  _onTrack (event) {\n    if (this.destroyed) return\n\n    event.streams.forEach(eventStream => {\n      this._debug('on track')\n      this.emit('track', event.track, eventStream)\n\n      this._remoteTracks.push({\n        track: event.track,\n        stream: eventStream\n      })\n\n      if (this._remoteStreams.some(remoteStream => {\n        return remoteStream.id === eventStream.id\n      })) return // Only fire one 'stream' event, even though there may be multiple tracks per stream\n\n      this._remoteStreams.push(eventStream)\n      queueMicrotask(() => {\n        this._debug('on stream')\n        this.emit('stream', eventStream) // ensure all tracks have been added\n      })\n    })\n  }\n\n  _debug () {\n    const args = [].slice.call(arguments)\n    args[0] = '[' + this._id + '] ' + args[0]\n    debug.apply(null, args)\n  }\n}\n\nPeer.WEBRTC_SUPPORT = !!getBrowserRTC()\n\n/**\n * Expose peer and data channel config for overriding all Peer\n * instances. Otherwise, just set opts.config or opts.channelConfig\n * when constructing a Peer.\n */\nPeer.config = {\n  iceServers: [\n    {\n      urls: [\n        'stun:stun.l.google.com:19302',\n        'stun:global.stun.twilio.com:3478'\n      ]\n    }\n  ],\n  sdpSemantics: 'unified-plan'\n}\n\nPeer.channelConfig = {}\n\nmodule.exports = Peer\n"]},"metadata":{},"sourceType":"script"}